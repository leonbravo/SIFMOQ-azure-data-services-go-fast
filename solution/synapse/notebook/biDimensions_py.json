{
	"name": "biDimensions_py",
	"properties": {
		"description": "WIP meant to contain the schemas for bi dimensions",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2ef55c86-9cdc-486c-80bd-3a9ca997b18b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/21fec1ab-7af8-4f99-b66f-a69e7ba77a22/resourceGroups/BCE-AAE-OEA-DEV-RG/providers/Microsoft.Synapse/workspaces/bce-aae-oea-dev-syn/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://bce-aae-oea-dev-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Microsoft Insights Class"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class biDimensions(BaseOEAModule):\r\n",
					"    \"\"\"\r\n",
					"    Provides data processing methods for MS Insights data.\r\n",
					"    Data is expected to be received via ADS into stage1np/ms_insights\r\n",
					"    The structure of the folders in stage1np will then be something like:\r\n",
					"        -> stage1np/ms_insights/activity/2021-06-02\r\n",
					"            -> stage1np/ms_insights/activity/2021-06-02/ApplicationUsage.csv\r\n",
					"        -> stage1np/ms_insights/roster/2021-06-02T06-05-11/\r\n",
					"            -> stage1np/ms_insights/roster/2021-06-02T06-05-11/AadUser\r\n",
					"            -> stage1np/ms_insights/roster/2021-06-02T06-05-11/Person\r\n",
					"            etc\r\n",
					"\r\n",
					"    In stage2, everything is written to stage2np/ms_insights and stage2p/ms_insights\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    def __init__(self, source_folder= 'BCE/BI/Dimensions'):\r\n",
					"        BaseOEAModule.__init__(self, source_folder)\r\n",
					"\r\n",
					"      \r\n",
					"        self.schemas['Location'] = [\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','timestamp', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','string', 'hash-no-lookup'],\r\n",
					"                        ['','string', 'no-op'],\r\n",
					"                        ['','timestamp', 'no-op'],\r\n",
					"                        ['','onDate', 'timestamp', 'no-op'],\r\n",
					"                        ['','ring', 'no-op'],\r\n",
					"                        ['','xtension', 'string', 'no-op'],\r\n",
					"                        ['','tion', 'integer', 'no-op'], \r\n",
					"                        ['','eger', 'partition-by']]\r\n",
					"\r\n",
					"            \r\n",
					"    def ingest(self):\r\n",
					"        \"\"\"  Processes insights data from stage1 into stage2 using structured streaming within the defined functions below.\"\"\"\r\n",
					"        logger.info(\"Processing microsoft_insights data from: \" + self.stage1np)\r\n",
					"        \r\n",
					"        items = mssparkutils.fs.ls(self.stage1np)\r\n",
					"        for item in items:\r\n",
					"            if item.name == \"activity\":\r\n",
					"                self.process_insights_activity_stage1_data()\r\n",
					"            elif item.name == \"roster\":\r\n",
					"                self.process_roster()\r\n",
					"            elif item.name == \"schemas\":\r\n",
					"                logger.info(\"ignoring ingestion of the schemas folder\")\r\n",
					"            elif item.name == \"current.manifest.cdm.json\":\r\n",
					"                logger.info(\"ignoring ingestion of the manifest json\")\r\n",
					"            else:\r\n",
					"                logger.info(\"No defined function for processing this insights data\")\r\n",
					"        \r\n",
					"        logger.info(\"Finished ingesting insights data from stage 1 to stage 2\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}